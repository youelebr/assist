module ("s2s.auto", package.seeall)

require ("s2s.fct_from_maqao")

-- Set the experiement environment
function s2s:set_s2s_auto_env (auto_input, version)
	if fs.exists(auto_input.xp_ov_path) == false then
		os.execute("mkdir "..auto_input.xp_ov_path)
	end

	-- copy src directory next to src origin directory
	if version == "0" or version == 0 then
		if os.execute("cp -r "..auto_input.src.." "..auto_input.src.."_V"..(version+1)) ~= 0 then
			return false
		end
		if os.execute("mv "..auto_input.src.." "..auto_input.src.."_V"..version) ~= 0 then
			return false
		end
	elseif os.execute("cp -r "..auto_input.src.."_V"..version.." "..auto_input.src.."_V"..(version+1)) ~= 0 then
		return false
	end
	--auto_input.src = string.gsub(auto_input.src, "_V%d$", "")
	return true
end

function s2s:run_oneview(auto_input, version)
	if fs.exists(auto_input.src) then
		os.execute("unlink "..auto_input.src)
	end
	 print("ln -s "..auto_input.src.."_V"..version.." "..auto_input.src)
	
	if os.execute("ln -s "..auto_input.src.."_V"..version.." "..auto_input.src) ~= 0 then
		return false
	end
	Message:info("START COMPILATION")
	if os.execute("cd "..auto_input.makefile.."; make "..auto_input.make_opt) ~= 0 then
		return false
	end
	Message:info("END COMPILATION")
	Message:info("START ONEVIEW")
	--[[
	if fs.exists(auto_input.binary) == false then
      	ret = false
      	Message:error("In configuration file: the path to binary does not exist")
		return false     
    end

	Message:info("START ONEVIEW")
    ov_cmd_launch = "cd "..auto_input.xp_ov_path.."; "..auto_input.ov_bin.." oneview --assist -create-report="..auto_input.report.." -xp=./exp_ov_on_V"..version.." -binary="..auto_input.binary
    
    if auto_input.run_cmd ~= "" then
      ov_cmd_launch = ov_cmd_launch.." -run_command="..auto_input.run_cmd
    end
    if auto_input.dataset ~= "" then
      ov_cmd_launch = ov_cmd_launch.." -dataset="..auto_input.dataset
    end
    print(ov_cmd_launch)
    ]]
    ov_cmd_launch = "cd "..auto_input.xp_ov_path.."; "..auto_input.ov_bin.." oneview --assist -create-report="..auto_input.report.." -xp=./exp_ov_on_V"..version.." -c="..auto_input.ov_config
    if fs.exists("maqaoOvTmpLaunch.txt") == false then
	    ov_cmd_launch = ov_cmd_launch.." >> maqaoOvTmpLaunch.txt; rm maqaoOvTmpLaunch.txt"
	end
    if os.execute(ov_cmd_launch) ~= 0 then
    	Message:error("Error when executing Oneview")
    	return false
    end
    Message:info("END ONEVIEW")

    if fs.exists(auto_input.xp_ov_path.."/exp_ov_on_V"..version.."/RESULTS/assist.lua") == false then
    	Message:error("The report "..auto_input.report.." is not accepted by Assist")
    	return false
    end
    return true
end

-- Find the last version of modification of the source code.
function s2s:find_last_version(src_path)
	local version = 0
	
	if string.match(src_path, ".*/") ~= nil then
		local content = fs.readdir (string.match(src_path, ".*/"))
		local src_name = string.gsub(src_path, ".*/", "")
		for _, f in pairs (content) do
			if string.match(f.name, src_name.."_V%d$") ~= nil then
				version = version + 1
			end
		end
		if version ~= 0 then
			version = version - 1
		end
	else
		Message:error("[find last version] Needs absolute path")
		return false
	end
	return version
end

local function erase_prev(src_path)
	local files = fs.readdir(src_path)
	for _, f in pairs (files) do
		if string.match(f.name, "^prev_") then
			local file = string.gsub(f.name, "prev_", "")
			os.execute("mv "..src_path.."/"..f.name.." "..src_path.."/"..file)
		end
	end
end

-- Clean the experiment environment, leaving the original source directory and le report generated by Oneview
function s2s:clean_auto_env(src, nb_version, last_version)
	Message:info("CLEAN ENVIRONMENT")
	print("--> unlink "..src)
	os.execute("unlink "..src)
	local src_dir = string.gsub(src, ".*/", "")
	if last_version <= 0 then
		print("--> mv "..src.."_V0 "..src)
	   	os.execute("mv "..src.."_V0 "..src)
	   	print("--> rm -rf "..src.."_*")
	   	os.execute("rm -rf "..src.."_*")
	   	erase_prev(src)
	   	print("--> rm -rf maqao_s2s_ov_results_"..src_dir)
	   --	os.execute("rm -rf maqao_s2s_ov_results_"..src_dir)
	else
		erase_prev(src.."_V"..last_version)
		print("ln -s "..src.."_V"..last_version.." "..src)
		os.execute("ln -s "..src.."_V"..last_version.." "..src)
		last_version = last_version + 1
		while last_version < nb_version do
			print("--> rm -rf "..src.."_V"..last_version)
			print("--> rm -rf maqao_s2s_ov_results_"..src_dir.."/exp_ov_on_V"..last_version)  	
		   	os.execute("rm -rf "..src.."_V"..last_version)
		   	os.execute("rm -rf maqao_s2s_ov_results_"..src_dir.."/exp_ov_on_V"..last_version)
		   	last_version = last_version + 1
		end
		
	end
   	Message:info("CLEANING DONE")
end
